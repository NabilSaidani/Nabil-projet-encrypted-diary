{"ast":null,"code":"var _jsxFileName = \"/Users/nabilbilnax/Desktop/encrypted-diary/src/components/PasswordComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PasswordComponent = ({\n  onEncrypt,\n  onDecrypt,\n  encryptedText\n}) => {\n  _s();\n  const [decryptedText, setDecryptedText] = useState('');\n\n  // Quand le texte crypté change, on déchiffre le texte et on déclenche onDecrypt une seule fois.\n  useEffect(() => {\n    if (encryptedText) {\n      // Déchiffre le texte crypté\n      const decrypted = decryptText(encryptedText);\n\n      // Si le texte décrypté change, on met à jour l'état et appelle la fonction onDecrypt\n      if (decrypted !== decryptedText) {\n        setDecryptedText(decrypted);\n        onDecrypt(decrypted); // Déclenche la fonction de callback avec le texte décrypté\n      }\n    }\n  }, [encryptedText, decryptedText, onDecrypt]); // Cette dépendance assure que le code ne sera exécuté que lorsque encryptedText ou decryptedText changent\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: decryptedText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n// Fonction de décryptage (exemple)\n_s(PasswordComponent, \"/2b1fCJ2LC2opoI3AaDOh/NAEb0=\");\n_c = PasswordComponent;\nconst decryptText = encryptedText => {\n  // Ajoute ici ta logique de décryptage\n  return atob(encryptedText); // Exemple de décryptage base64\n};\nexport default PasswordComponent;\nvar _c;\n$RefreshReg$(_c, \"PasswordComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","PasswordComponent","onEncrypt","onDecrypt","encryptedText","_s","decryptedText","setDecryptedText","decrypted","decryptText","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","atob","$RefreshReg$"],"sources":["/Users/nabilbilnax/Desktop/encrypted-diary/src/components/PasswordComponent.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\ninterface PasswordComponentProps {\n  onEncrypt: (encryptedText: string) => void;\n  onDecrypt: (decryptedText: string) => void;\n  encryptedText: string;\n}\n\nconst PasswordComponent: React.FC<PasswordComponentProps> = ({ onEncrypt, onDecrypt, encryptedText }) => {\n  const [decryptedText, setDecryptedText] = useState('');\n\n  // Quand le texte crypté change, on déchiffre le texte et on déclenche onDecrypt une seule fois.\n  useEffect(() => {\n    if (encryptedText) {\n      // Déchiffre le texte crypté\n      const decrypted = decryptText(encryptedText);\n\n      // Si le texte décrypté change, on met à jour l'état et appelle la fonction onDecrypt\n      if (decrypted !== decryptedText) {\n        setDecryptedText(decrypted);\n        onDecrypt(decrypted); // Déclenche la fonction de callback avec le texte décrypté\n      }\n    }\n  }, [encryptedText, decryptedText, onDecrypt]); // Cette dépendance assure que le code ne sera exécuté que lorsque encryptedText ou decryptedText changent\n\n  return (\n    <div>\n      <p>{decryptedText}</p> {/* Affiche le texte décrypté */}\n    </div>\n  );\n};\n\n// Fonction de décryptage (exemple)\nconst decryptText = (encryptedText: string): string => {\n  // Ajoute ici ta logique de décryptage\n  return atob(encryptedText); // Exemple de décryptage base64\n};\n\nexport default PasswordComponent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQnD,MAAMC,iBAAmD,GAAGA,CAAC;EAAEC,SAAS;EAAEC,SAAS;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EACvG,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAEtD;EACAC,SAAS,CAAC,MAAM;IACd,IAAIM,aAAa,EAAE;MACjB;MACA,MAAMI,SAAS,GAAGC,WAAW,CAACL,aAAa,CAAC;;MAE5C;MACA,IAAII,SAAS,KAAKF,aAAa,EAAE;QAC/BC,gBAAgB,CAACC,SAAS,CAAC;QAC3BL,SAAS,CAACK,SAAS,CAAC,CAAC,CAAC;MACxB;IACF;EACF,CAAC,EAAE,CAACJ,aAAa,EAAEE,aAAa,EAAEH,SAAS,CAAC,CAAC,CAAC,CAAC;;EAE/C,oBACEH,OAAA;IAAAU,QAAA,gBACEV,OAAA;MAAAU,QAAA,EAAIJ;IAAa;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEV,CAAC;;AAED;AAAAT,EAAA,CAxBMJ,iBAAmD;AAAAc,EAAA,GAAnDd,iBAAmD;AAyBzD,MAAMQ,WAAW,GAAIL,aAAqB,IAAa;EACrD;EACA,OAAOY,IAAI,CAACZ,aAAa,CAAC,CAAC,CAAC;AAC9B,CAAC;AAED,eAAeH,iBAAiB;AAAC,IAAAc,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}