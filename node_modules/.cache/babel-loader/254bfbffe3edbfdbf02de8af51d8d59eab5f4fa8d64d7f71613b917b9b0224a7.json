{"ast":null,"code":"var _jsxFileName = \"/Users/nabilbilnax/Desktop/encrypted-diary/src/components/PasswordComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport CryptoJS from \"crypto-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PasswordComponent = ({\n  onDecrypt,\n  encryptedText\n}) => {\n  _s();\n  const [password, setPassword] = useState(\"\");\n  const handleDecrypt = () => {\n    try {\n      const bytes = CryptoJS.AES.decrypt(encryptedText, password);\n      const decryptedText = bytes.toString(CryptoJS.enc.Utf8);\n      if (!decryptedText) {\n        alert(\"Erreur ! Mot de passe incorrect.\");\n        return;\n      }\n      onDecrypt(decryptedText);\n    } catch (error) {\n      console.error(\"Erreur lors du décryptage:\", error);\n      alert(\"Erreur ! Mot de passe incorrect.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: \"300px\",\n      margin: \"10px auto\",\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      value: password,\n      onChange: e => setPassword(e.target.value),\n      placeholder: \"Entrer le mot de passe\",\n      style: {\n        width: \"100%\",\n        padding: \"10px\",\n        marginBottom: \"10px\",\n        borderRadius: \"5px\",\n        fontSize: \"16px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDecrypt,\n      style: {\n        padding: \"10px 15px\",\n        fontSize: \"16px\",\n        cursor: \"pointer\",\n        borderRadius: \"5px\"\n      },\n      children: \"D\\xE9crypter le message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(PasswordComponent, \"fsE4KjUtTGid/UZc9Uo/kD8+5F8=\");\n_c = PasswordComponent;\nexport default PasswordComponent;\nvar _c;\n$RefreshReg$(_c, \"PasswordComponent\");","map":{"version":3,"names":["React","useState","CryptoJS","jsxDEV","_jsxDEV","PasswordComponent","onDecrypt","encryptedText","_s","password","setPassword","handleDecrypt","bytes","AES","decrypt","decryptedText","toString","enc","Utf8","alert","error","console","style","maxWidth","margin","textAlign","children","type","value","onChange","e","target","placeholder","width","padding","marginBottom","borderRadius","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","onClick","cursor","_c","$RefreshReg$"],"sources":["/Users/nabilbilnax/Desktop/encrypted-diary/src/components/PasswordComponent.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport CryptoJS from \"crypto-js\";\n\ninterface PasswordComponentProps {\n  onDecrypt: (decryptedText: string) => void;\n  encryptedText: string;\n}\n\nconst PasswordComponent: React.FC<PasswordComponentProps> = ({\n  onDecrypt,\n  encryptedText,\n}) => {\n  const [password, setPassword] = useState(\"\");\n\n  const handleDecrypt = () => {\n    try {\n      const bytes = CryptoJS.AES.decrypt(encryptedText, password);\n      const decryptedText = bytes.toString(CryptoJS.enc.Utf8);\n      if (!decryptedText) {\n        alert(\"Erreur ! Mot de passe incorrect.\");\n        return;\n      }\n      onDecrypt(decryptedText);\n    } catch (error) {\n      console.error(\"Erreur lors du décryptage:\", error);\n      alert(\"Erreur ! Mot de passe incorrect.\");\n    }\n  };\n\n  return (\n    <div style={{ maxWidth: \"300px\", margin: \"10px auto\", textAlign: \"center\" }}>\n      <input\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        placeholder=\"Entrer le mot de passe\"\n        style={{\n          width: \"100%\",\n          padding: \"10px\",\n          marginBottom: \"10px\",\n          borderRadius: \"5px\",\n          fontSize: \"16px\",\n        }}\n      />\n      <button\n        onClick={handleDecrypt}\n        style={{\n          padding: \"10px 15px\",\n          fontSize: \"16px\",\n          cursor: \"pointer\",\n          borderRadius: \"5px\",\n        }}\n      >\n        Décrypter le message\n      </button>\n    </div>\n  );\n};\n\nexport default PasswordComponent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOjC,MAAMC,iBAAmD,GAAGA,CAAC;EAC3DC,SAAS;EACTC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMU,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAI;MACF,MAAMC,KAAK,GAAGV,QAAQ,CAACW,GAAG,CAACC,OAAO,CAACP,aAAa,EAAEE,QAAQ,CAAC;MAC3D,MAAMM,aAAa,GAAGH,KAAK,CAACI,QAAQ,CAACd,QAAQ,CAACe,GAAG,CAACC,IAAI,CAAC;MACvD,IAAI,CAACH,aAAa,EAAE;QAClBI,KAAK,CAAC,kCAAkC,CAAC;QACzC;MACF;MACAb,SAAS,CAACS,aAAa,CAAC;IAC1B,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDD,KAAK,CAAC,kCAAkC,CAAC;IAC3C;EACF,CAAC;EAED,oBACEf,OAAA;IAAKkB,KAAK,EAAE;MAAEC,QAAQ,EAAE,OAAO;MAAEC,MAAM,EAAE,WAAW;MAAEC,SAAS,EAAE;IAAS,CAAE;IAAAC,QAAA,gBAC1EtB,OAAA;MACEuB,IAAI,EAAC,UAAU;MACfC,KAAK,EAAEnB,QAAS;MAChBoB,QAAQ,EAAGC,CAAC,IAAKpB,WAAW,CAACoB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC7CI,WAAW,EAAC,wBAAwB;MACpCV,KAAK,EAAE;QACLW,KAAK,EAAE,MAAM;QACbC,OAAO,EAAE,MAAM;QACfC,YAAY,EAAE,MAAM;QACpBC,YAAY,EAAE,KAAK;QACnBC,QAAQ,EAAE;MACZ;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACFrC,OAAA;MACEsC,OAAO,EAAE/B,aAAc;MACvBW,KAAK,EAAE;QACLY,OAAO,EAAE,WAAW;QACpBG,QAAQ,EAAE,MAAM;QAChBM,MAAM,EAAE,SAAS;QACjBP,YAAY,EAAE;MAChB,CAAE;MAAAV,QAAA,EACH;IAED;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACjC,EAAA,CAjDIH,iBAAmD;AAAAuC,EAAA,GAAnDvC,iBAAmD;AAmDzD,eAAeA,iBAAiB;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}