{"ast":null,"code":"var _jsxFileName = \"/Users/nabilbilnax/Desktop/encrypted-diary/src/components/PasswordComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CryptoJS from 'crypto-js';\n\n// Déclarez les props pour passer la fonction d'encryption\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PasswordComponent = ({\n  onEncrypt\n}) => {\n  _s();\n  const [password, setPassword] = useState('');\n  const [message, setMessage] = useState('');\n\n  // Fonction pour crypter le message\n  const encryptMessage = () => {\n    if (!password || !message) {\n      alert('Mot de passe et message sont requis');\n      return;\n    }\n\n    // Cryptage du message avec le mot de passe\n    const encrypted = CryptoJS.AES.encrypt(message, password).toString();\n\n    // Appel de la fonction pour transmettre le texte crypté\n    onEncrypt(encrypted);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Entrer un message \\xE0 crypter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: \"\\xC9crivez votre message ici\",\n      value: message,\n      onChange: e => setMessage(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Entrez un mot de passe\",\n      value: password,\n      onChange: e => setPassword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: encryptMessage,\n      children: \"Crypter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(PasswordComponent, \"P7DbJeeDGJoAhYJjeYykHFD7JrY=\");\n_c = PasswordComponent;\nexport default PasswordComponent;\nvar _c;\n$RefreshReg$(_c, \"PasswordComponent\");","map":{"version":3,"names":["React","useState","CryptoJS","jsxDEV","_jsxDEV","PasswordComponent","onEncrypt","_s","password","setPassword","message","setMessage","encryptMessage","alert","encrypted","AES","encrypt","toString","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","type","onClick","_c","$RefreshReg$"],"sources":["/Users/nabilbilnax/Desktop/encrypted-diary/src/components/PasswordComponent.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport CryptoJS from 'crypto-js';\n\n// Déclarez les props pour passer la fonction d'encryption\ninterface PasswordComponentProps {\n  onEncrypt: (encryptedText: string) => void;\n}\n\nconst PasswordComponent: React.FC<PasswordComponentProps> = ({ onEncrypt }) => {\n  const [password, setPassword] = useState<string>('');\n  const [message, setMessage] = useState<string>('');\n\n  // Fonction pour crypter le message\n  const encryptMessage = () => {\n    if (!password || !message) {\n      alert('Mot de passe et message sont requis');\n      return;\n    }\n\n    // Cryptage du message avec le mot de passe\n    const encrypted = CryptoJS.AES.encrypt(message, password).toString();\n\n    // Appel de la fonction pour transmettre le texte crypté\n    onEncrypt(encrypted); \n  };\n\n  return (\n    <div>\n      <h3>Entrer un message à crypter</h3>\n\n      {/* Zone de texte pour le message */}\n      <textarea\n        placeholder=\"Écrivez votre message ici\"\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n      />\n\n      {/* Zone de texte pour le mot de passe */}\n      <input\n        type=\"password\"\n        placeholder=\"Entrez un mot de passe\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n\n      {/* Bouton pour crypter */}\n      <button onClick={encryptMessage}>Crypter</button>\n    </div>\n  );\n};\n\nexport default PasswordComponent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,WAAW;;AAEhC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAKA,MAAMC,iBAAmD,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EAC7E,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAS,EAAE,CAAC;EACpD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAS,EAAE,CAAC;;EAElD;EACA,MAAMW,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI,CAACJ,QAAQ,IAAI,CAACE,OAAO,EAAE;MACzBG,KAAK,CAAC,qCAAqC,CAAC;MAC5C;IACF;;IAEA;IACA,MAAMC,SAAS,GAAGZ,QAAQ,CAACa,GAAG,CAACC,OAAO,CAACN,OAAO,EAAEF,QAAQ,CAAC,CAACS,QAAQ,CAAC,CAAC;;IAEpE;IACAX,SAAS,CAACQ,SAAS,CAAC;EACtB,CAAC;EAED,oBACEV,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAc,QAAA,EAAI;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGpClB,OAAA;MACEmB,WAAW,EAAC,8BAA2B;MACvCC,KAAK,EAAEd,OAAQ;MACfe,QAAQ,EAAGC,CAAC,IAAKf,UAAU,CAACe,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,eAGFlB,OAAA;MACEwB,IAAI,EAAC,UAAU;MACfL,WAAW,EAAC,wBAAwB;MACpCC,KAAK,EAAEhB,QAAS;MAChBiB,QAAQ,EAAGC,CAAC,IAAKjB,WAAW,CAACiB,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,eAGFlB,OAAA;MAAQyB,OAAO,EAAEjB,cAAe;MAAAM,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEV,CAAC;AAACf,EAAA,CAzCIF,iBAAmD;AAAAyB,EAAA,GAAnDzB,iBAAmD;AA2CzD,eAAeA,iBAAiB;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}